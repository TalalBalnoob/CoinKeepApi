// <auto-generated />
using System;
using CoinKeep.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoinKeep.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917134247_AddAccountsTable")]
    partial class AddAccountsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("CoinKeep.Core.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Balance")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balance Adjustment",
                            Type = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Salary",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Freelance",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Interest",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Groceries",
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Rent",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Utilities",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Entertainment",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Transport",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Investment",
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            Name = "Health",
                            Type = 1
                        });
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Account", b =>
                {
                    b.HasOne("CoinKeep.Core.Models.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("CoinKeep.Core.Models.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Category", b =>
                {
                    b.HasOne("CoinKeep.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Transaction", b =>
                {
                    b.HasOne("CoinKeep.Core.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinKeep.Core.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoinKeep.Core.Models.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
